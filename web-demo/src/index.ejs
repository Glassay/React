<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>程基锋的个人博客</title>
  <style>
    html{height: 100%;}
    body{margin: 0;height: 100%;}
    canvas{display: block;width: 100%;height: 100%;}
  </style>
  <!-- <link href="https://cdn.bootcss.com/aos/2.2.0/aos.css" rel="stylesheet">
  <script src="https://cdn.bootcss.com/aos/2.2.0/aos.js"></script> -->
  <script src="https://cdn.bootcss.com/scrollReveal.js/4.0.0-beta.24/scrollreveal.js"></script>
  <link rel="stylesheet" href="/index.css" />
</head>
<body>
  <div id="root"></div>
  <canvas id="canvas">your browser does not support the canvas tag </canvas>
  <script>
      window.onload = function () {
          // 设置参数
          var config = {
              // reset: true, // 滚动鼠标时，动画开关
              origin: 'left', // 动画开始的方向
              duration: 1000, // 动画持续时间
              delay: 0, // 延迟
              rotate: {x: 0, y: 0, z: 0}, // 过度到0的初始角度
              opacity: 0, // 初始透明度
              scale: 0.2, //缩放
              easing: 'linear', // 缓动'ease', 'ease-in-out'，'linear'
          }
          // 引用
          window.sr = ScrollReveal();
          // 后面的50那个参数是代表每隔50毫米出现一个li,最后一个参数是调用随机颜色函数
          sr.reveal('.sr', config, 50);
      }
  </script>

  <script>
    window.requestAnimFrame = (function(){
        return  window.requestAnimationFrame       ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame    ||
        function( callback ){
        window.setTimeout(callback, 1000 / 60);
        }
    })()

    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");

    var w = canvas.offsetWidth
    var h = canvas.offsetHeight

    canvas.width = w
    canvas.height = h

    function Point(x, y) {
        this.x = x
        this.y = y
        this.r = 1 + Math.random() * 2
        this.sx = Math.random() * 2 - 1
        this.sy = Math.random() * 2 - 1
    }

    Point.prototype.draw = function(ctx) {
        ctx.beginPath()
        ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI)
        ctx.closePath()
        ctx.fillStyle = '#aaa'
        ctx.fill()
    }

    Point.prototype.move = function() {
        this.x += this.sx
        this.y += this.sy
        if(this.x > w) this.sx = -Math.abs(this.sx)
        else if(this.x < 0) this.sx = Math.abs(this.sx)
        if(this.y > h) this.sy = -Math.abs(this.sy)
        else if(this.y < 0) this.sy = Math.abs(this.sy)
    }

    Point.prototype.drawLine = function(ctx, p) {
        var dx = this.x - p.x 
        var dy = this.y - p.y
        var d = Math.sqrt(dx * dx + dy * dy)
        if(d < 100) {
        var alpha = (100 - d) / 100 * 1 
        ctx.beginPath()
        ctx.moveTo(this.x, this.y)
        ctx.lineTo(p.x, p.y)
        ctx.closePath()
        ctx.strokeStyle = 'rgba(170, 170, 170, ' + alpha + ')'
        ctx.strokeWidth = 1
        ctx.stroke()
        }
    }

    var points = []

    for(var i = 0; i < 40; i++) {
        points.push(new Point(Math.random() * w, Math.random() * h))
    }

    function paint() {
        ctx.clearRect(0, 0, w, h)
        for(var i = 0; i < points.length; i++) {
        points[i].move()
        points[i].draw(ctx)
        for(var j = i + 1; j < points.length; j++) {
            points[i].drawLine(ctx, points[j])
        }
        }
    }

    function loop() {
        requestAnimFrame(loop)
        paint()
    }

    window.addEventListener('load', loop())
    window.addEventListener('resize', function() {
        w = canvas.width = canvas.offsetWidth
        h = canvas.height = canvas.offsetHeight
    })
  </script>
</body>
</html>
